// Code generated by protoc-gen-zig
///! package agent_payload
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const CommonMetadata = struct {
    agent_version: ManagedString = .Empty,
    timezone: ManagedString = .Empty,
    current_epoch: f64 = 0,
    internal_ip: ManagedString = .Empty,
    public_ip: ManagedString = .Empty,
    api_key: ManagedString = .Empty,

    pub const _desc_table = .{
        .agent_version = fd(1, .String),
        .timezone = fd(2, .String),
        .current_epoch = fd(3, .{ .FixedInt = .I64 }),
        .internal_ip = fd(4, .String),
        .public_ip = fd(5, .String),
        .api_key = fd(6, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Origin = struct {
    origin_product: u32 = 0,
    origin_category: u32 = 0,
    origin_service: u32 = 0,

    pub const _desc_table = .{
        .origin_product = fd(4, .{ .Varint = .Simple }),
        .origin_category = fd(5, .{ .Varint = .Simple }),
        .origin_service = fd(6, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Metadata = struct {
    origin: ?Origin = null,

    pub const _desc_table = .{
        .origin = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SketchPayload = struct {
    sketches: ArrayList(Sketch),
    metadata: ?CommonMetadata = null,

    pub const _desc_table = .{
        .sketches = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .metadata = fd(2, .{ .SubMessage = {} }),
    };

    pub const Sketch = struct {
        metric: ManagedString = .Empty,
        host: ManagedString = .Empty,
        distributions: ArrayList(Distribution),
        tags: ArrayList(ManagedString),
        dogsketches: ArrayList(Dogsketch),
        metadata: ?Metadata = null,

        pub const _desc_table = .{
            .metric = fd(1, .String),
            .host = fd(2, .String),
            .distributions = fd(3, .{ .List = .{ .SubMessage = {} } }),
            .tags = fd(4, .{ .List = .String }),
            .dogsketches = fd(7, .{ .List = .{ .SubMessage = {} } }),
            .metadata = fd(8, .{ .SubMessage = {} }),
        };

        pub const Distribution = struct {
            ts: i64 = 0,
            cnt: i64 = 0,
            min: f64 = 0,
            max: f64 = 0,
            avg: f64 = 0,
            sum: f64 = 0,
            v: ArrayList(f64),
            g: ArrayList(u32),
            delta: ArrayList(u32),
            buf: ArrayList(f64),

            pub const _desc_table = .{
                .ts = fd(1, .{ .Varint = .Simple }),
                .cnt = fd(2, .{ .Varint = .Simple }),
                .min = fd(3, .{ .FixedInt = .I64 }),
                .max = fd(4, .{ .FixedInt = .I64 }),
                .avg = fd(5, .{ .FixedInt = .I64 }),
                .sum = fd(6, .{ .FixedInt = .I64 }),
                .v = fd(7, .{ .PackedList = .{ .FixedInt = .I64 } }),
                .g = fd(8, .{ .PackedList = .{ .Varint = .Simple } }),
                .delta = fd(9, .{ .PackedList = .{ .Varint = .Simple } }),
                .buf = fd(10, .{ .PackedList = .{ .FixedInt = .I64 } }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const Dogsketch = struct {
            ts: i64 = 0,
            cnt: i64 = 0,
            min: f64 = 0,
            max: f64 = 0,
            avg: f64 = 0,
            sum: f64 = 0,
            k: ArrayList(i32),
            n: ArrayList(u32),

            pub const _desc_table = .{
                .ts = fd(1, .{ .Varint = .Simple }),
                .cnt = fd(2, .{ .Varint = .Simple }),
                .min = fd(3, .{ .FixedInt = .I64 }),
                .max = fd(4, .{ .FixedInt = .I64 }),
                .avg = fd(5, .{ .FixedInt = .I64 }),
                .sum = fd(6, .{ .FixedInt = .I64 }),
                .k = fd(7, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
                .n = fd(8, .{ .PackedList = .{ .Varint = .Simple } }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
